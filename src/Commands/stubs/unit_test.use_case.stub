<?php

declare(strict_types=1);

namespace DummyNamespace;

use DummyOutputBoundaryNamespace\DummyClass as OutputBoundary;
use DummyInputDataNamespace\DummyClass as InputData;
use DummyOutputDataNamespace\DummyClass as OutputData;
use DummyUseCaseNamespace\DummyClass as UseCase;
use DummyViewModelNamespace\DummyClass as ViewModel;
use PHPUnit\Framework\TestCase;
use Prophecy\Prophecy\ObjectProphecy;

class DummyClassTest extends TestCase
{
    /**
     * @var ObjectProphecy|OutputBoundary
     */
    private $output;

    /**
     * @var UseCase
     */
    private $useCase;

    public function testDo()
    {
        $this->output->done(new OutputData())->willReturn(new ViewModel());

        $viewModel = $this->useCase->do(new InputData());

        $this->assertInstanceOf(ViewModel::class, $viewModel);
        $this->output->done(new OutputData())->shouldHaveBeenCalled();
    }

    protected function setUp()
    {
        $this->output = $this->prophesize(OutputBoundary::class);
        $this->useCase = new UseCase($this->output->reveal());
    }
}
